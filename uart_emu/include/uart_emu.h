/*
 * SPDX-FileCopyrightText: 2025 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#pragma once

#include <stdint.h>
#include <stdbool.h>
#include "esp_err.h"
#include "uart_emu_type.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
    uint32_t baud_rate;                   /*!< UART baud rate*/
    uart_emu_word_length_t data_bits;     /*!< UART byte size*/
    uart_emu_parity_t parity;             /*!< UART parity mode*/
    uart_emu_stop_bits_t stop_bits;       /*!< UART stop bits*/
    gpio_num_t tx_io_num;                 /*!< UART tx io number*/
    gpio_num_t rx_io_num;                 /*!< UART rx io number*/
    size_t rx_buffer_size;                /*!< UART rx buffer size*/
} uart_emu_config_t;

/**
 * @brief Transmit data over a UART emulator. This is a non-blocking function.
 *
 * @note You can use the `uart_emu_register_tx_event_callbacks()` function to register a callback function to handle the transmission done event.
 * @param[in] uart_device Handle to the UART EMU controller.
 * @param[in] data        Pointer to the data to be transmitted.
 * @param[in] size        Size of the data to be transmitted.
 *
 * @return
 * - `ESP_OK`: Start transmitting successfully.
 * - `ESP_ERR_INVALID_ARG`: Invalid arguments (e.g., null `uart_device` handle or `data` pointer).
 */
esp_err_t uart_emu_transmit(uart_emu_device_handle_t uart_device, const uint8_t *data, size_t size);

/**
 * @brief Receive data over a UART emulator. This is a non-blocking function.
 *
 * @note You can use the `uart_emu_register_rx_event_callbacks()` function to register a callback function to handle the received data.
 *
 * @param[in] uart_device Handle to the UART EMU controller, which was previously created using
 *                        `uart_emu_new_from_rmt()`.
 * @param[in] buf         Pointer to the buffer to store the received data.
 * @param[in] size        Size of the buffer to store the received data.
 *
 * @return
 * - `ESP_OK`: Start receiving successfully.
 * - `ESP_ERR_INVALID_ARG`: Invalid arguments (e.g., null `uart_device` handle or `buf` pointer).
 */
esp_err_t uart_emu_receive(uart_emu_device_handle_t uart_device, uint8_t *buf, size_t size);

/**
 * @brief Delete a UART EMU controller.
 *
 * @param[in] uart_device Handle to the UART EMU controller.
 *
 * @return
 * - `ESP_OK`: UART EMU controller was successfully deleted.
 * - `ESP_ERR_INVALID_ARG`: Invalid arguments (e.g., null `uart_device` handle).
 */
esp_err_t uart_emu_delete(uart_emu_device_handle_t uart_device);

/**
 * @brief Structure for defining callback functions for RMT UART transmission events.
 */
typedef struct {
    uart_emu_tx_done_callback_t on_tx_trans_done;           /*!< Callback function for handling the completion of a transmission */
} uart_emu_event_tx_callbacks_t;

/**
 * @brief Structure for defining callback functions for RMT UART receive events.
 */
typedef struct {
    uart_emu_rx_done_callback_t on_rx_trans_done;           /*!< Callback function for handling the completion of a reception */
} uart_emu_event_rx_callbacks_t;

/**
 * @brief Register rx event callback functions for a UART EMU controller.
 *
 * @note This function allows the user to register callback functions to handle specific UART EMU reception completion event.
 *       The callbacks provide a mechanism to handle asynchronous events generated by the UART EMU controller.
 *
 * @param[in] uart_device Handle to the UART EMU controller, which was previously created by `uart_emu_new_from_rmt()`.
 * @param[in] cbs         Pointer to a `uart_emu_rmt_event_rx_callbacks_t` structure that defines the callback
 *                        functions to be registered. This structure includes pointers to the callback
 *                        functions for handling UART EMU events.
 * @param[in] user_data   Pointer to user-defined data that will be passed to the callback functions
 *                        when they are invoked. This can be used to provide context or state information
 *                        specific to the application.
 *
 * @return
 * - `ESP_OK`: Register event callbacks successfully.
 * - `ESP_ERR_INVALID_ARG`: Invalid arguments (e.g., null `uart_device` handle or `cbs` pointer).
 */
esp_err_t uart_emu_register_rx_event_callbacks(uart_emu_device_handle_t uart_device, const uart_emu_event_rx_callbacks_t *cbs, void *user_data);

/**
 * @brief Register tx event callback functions for a UART EMU controller.
 *
 * @note This function allows the user to register callback functions to handle specific UART EMU transmission completion event.
 *       The callbacks provide a mechanism to handle asynchronous events generated by the UART EMU controller.
 *
 * @param[in] uart_device Handle to the UART EMU controller, which was previously created by `uart_emu_new_from_rmt()`.
 * @param[in] cbs         Pointer to a `uart_emu_rmt_event_tx_callbacks_t` structure that defines the callback
 *                        functions to be registered. This structure includes pointers to the callback
 *                        functions for handling UART EMU events.
 * @param[in] user_data   Pointer to user-defined data that will be passed to the callback functions
 *                        when they are invoked. This can be used to provide context or state information
 *                        specific to the application.
 *
 * @return
 * - `ESP_OK`: Register event callbacks successfully.
 * - `ESP_ERR_INVALID_ARG`: Invalid arguments (e.g., null `uart_device` handle or `cbs` pointer).
 */
esp_err_t uart_emu_register_tx_event_callbacks(uart_emu_device_handle_t uart_device, const uart_emu_event_tx_callbacks_t *cbs, void *user_data);

#ifdef __cplusplus
}
#endif
