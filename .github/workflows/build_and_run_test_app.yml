name: Build and Run Test Application

on:
  schedule:
    - cron: '0 0 * * *' # Once per day at midnight
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  build:
    name: Build Test App
    strategy:
      fail-fast: false
      matrix:
        idf_ver: ["release-v4.3", "release-v4.4", "latest"]
        idf_target: ["esp32", "esp32c3", "esp32s3"] # @todo ESP32S2 has less RAM and the test_app will not fit
        exclude:
          - idf_ver: "release-v4.3"
            idf_target: esp32s3 # ESP32S3 support started with version 4.4
    runs-on: ubuntu-20.04
    container: espressif/idf:${{ matrix.idf_ver }}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'true'
      - name: Build Test Application
        env:
          IDF_TARGET: ${{ matrix.idf_target }}
        shell: bash
        working-directory: test_app
        run: |
          . ${IDF_PATH}/export.sh
          export PEDANTIC_FLAGS="-DIDF_CI_BUILD -Werror -Werror=deprecated-declarations -Werror=unused-variable -Werror=unused-but-set-variable -Werror=unused-function"
          export EXTRA_CFLAGS="${PEDANTIC_FLAGS} -Wstrict-prototypes"
          export EXTRA_CXXFLAGS="${PEDANTIC_FLAGS}"
          idf.py build
      - uses: actions/upload-artifact@v2
        with:
          name: test_app_bin_${{ matrix.idf_target }}_${{ matrix.idf_ver }}
          path: |
            test_app/build/bootloader/bootloader.bin
            test_app/build/partition_table/partition-table.bin
            test_app/build/idf_extra_test_app.bin
            test_app/build/idf_extra_test_app.elf
            test_app/build/flasher_args.json

  # Keeping this here for future reference. QEMU tests are not passing now
  #run-qemu:
  #  name: Run Test App in QEMU
  #  needs: build
  #  strategy:
  #    matrix:
  #      idf_ver: ["release-v4.4", "latest"] #FIXME: QEMU is crashing with v4.3 build
  #  runs-on: ubuntu-20.04
  #  container: ageon/pytest_env
  #  steps:
  #    - uses: actions/checkout@v2
  #      with:
  #        fetch-depth: 0
  #    - uses: actions/download-artifact@v2
  #      with:
  #        name: test_app_bin_esp32_${{ matrix.idf_ver }}
  #        path: test_app/build
  #    - name: Run Test App in QEMU
  #      working-directory: test_app
  #      run: pytest -s --junit-xml=./test_app_results.xml --embedded-services qemu

  run-target:
    name: Run Test App on target
    needs: build
    strategy:
      fail-fast: false
      matrix:
        idf_ver: ["release-v4.3", "release-v4.4", "latest"]
        idf_target: ["esp32", "esp32c3", "esp32s3"]
        exclude:
          - idf_ver: "release-v4.3"
            idf_target: esp32s3 # ESP32S3 support started with version 4.4
    runs-on: [self-hosted, linux, docker, "${{ matrix.idf_target }}"]
    container:
      image: python:3.7-buster
      options: --privileged # Privileged mode has access to serial ports
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
        with:
          name: test_app_bin_${{ matrix.idf_target }}_${{ matrix.idf_ver }}
          path: test_app/build
      - name: Install Python packages
        env:
          PIP_EXTRA_INDEX_URL: "https://www.piwheels.org/simple"
        run: pip install pytest-embedded pytest-embedded-serial-esp pytest-embedded-idf
      - name: Run Test App on target
        working-directory: test_app
        run: pytest --junit-xml=./test_app_results_${{ matrix.idf_target }}_${{ matrix.idf_ver }}.xml --target=${{ matrix.idf_target }}
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test_app_results_${{ matrix.idf_target }}_${{ matrix.idf_ver }}
          path: test_app/*.xml

  publish-results: # @todo fix this for public forks
    name: Publish Test App results
    needs: run-target
    if: always() # Run even if the previous step failed
    runs-on: ubuntu-20.04
    steps:
      - name: Download Test results
        uses: actions/download-artifact@v2
        with:
          path: test_results
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: test_results/**/*.xml
